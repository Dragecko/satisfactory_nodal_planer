import { BlockModel } from '../blocks/types';

/**
 * Gestionnaire de la biblioth√®que de blocs personnalis√©s
 * 
 * Ce module g√®re la cr√©ation, la suppression et la manipulation
 * des blocs personnalis√©s stock√©s sous forme de fichiers TypeScript
 * dans le dossier src/blocks/Library/.
 * 
 * Syst√®me de stockage :
 * - Stockage temporaire : localStorage avec pr√©fixe 'snp:temp:'
 * - Stockage permanent : Fichiers TypeScript dans src/blocks/Library/
 * - Index automatique : Mise √† jour de src/blocks/Library/index.ts
 * - Chargement : Import dynamique des fichiers au d√©marrage
 */

/**
 * Pr√©fixe pour les cl√©s temporaires dans localStorage
 */
const TEMP_PREFIX = 'snp:temp:';

/**
 * G√©n√®re un nom de fichier unique pour un bloc personnalis√©
 */
export function generateUniqueFileName(baseName: string): string {
  // Nettoyer le nom pour qu'il soit compatible avec un nom de fichier
  const cleanName = baseName
    .replace(/[^a-zA-Z0-9\s]/g, '') // Supprimer les caract√®res sp√©ciaux
    .replace(/\s+/g, '_') // Remplacer les espaces par des underscores
    .replace(/^_+|_+$/g, ''); // Supprimer les underscores en d√©but/fin
  
  return `${cleanName}.ts`;
}

/**
 * G√©n√®re le contenu TypeScript d'un bloc personnalis√©
 */
export function generateBlockFileContent(model: BlockModel, fileName: string): string {
  const blockName = fileName.replace('.ts', '');
  
  return `import { BlockModel } from '../types';

/**
 * Bloc personnalis√© : ${model.name}
 * 
 * ${model.description || 'Aucune description'}
 * 
 * Cr√©√© le : ${new Date().toLocaleDateString('fr-FR')}
 */
const ${blockName}: BlockModel = ${JSON.stringify(model, null, 2)};

export default ${blockName};
`;
}

/**
 * G√©n√®re le contenu de l'index de la biblioth√®que
 */
export function generateLibraryIndexContent(models: Record<string, BlockModel>): string {
  const imports: string[] = [];
  const exports: string[] = [];
  
  Object.entries(models).forEach(([name, model]) => {
    const fileName = generateUniqueFileName(name);
    const blockName = fileName.replace('.ts', '');
    imports.push(`import ${blockName} from './${fileName}';`);
    exports.push(`  '${name}': ${blockName},`);
  });
  
  return `import { BlockModel } from '../types';

/**
 * Biblioth√®que des blocs personnalis√©s
 * 
 * Ce fichier exporte dynamiquement tous les blocs personnalis√©s
 * cr√©√©s par l'utilisateur. Les blocs sont automatiquement
 * ajout√©s ici lors de leur cr√©ation via l'interface.
 * 
 * Derni√®re mise √† jour : ${new Date().toLocaleDateString('fr-FR')}
 */

${imports.join('\n')}

// Import dynamique de tous les blocs personnalis√©s
const customModels: Record<string, BlockModel> = {
${exports.join('\n')}
};

/**
 * Obtient tous les blocs personnalis√©s
 */
export function getCustomModels(): Record<string, BlockModel> {
  return customModels;
}

/**
 * Obtient un bloc personnalis√© par nom
 */
export function getCustomModel(name: string): BlockModel | null {
  return customModels[name] || null;
}

/**
 * V√©rifie si un bloc personnalis√© existe
 */
export function hasCustomModel(name: string): boolean {
  return name in customModels;
}

/**
 * Obtient la liste des noms de blocs personnalis√©s
 */
export function getCustomModelNames(): string[] {
  return Object.keys(customModels).sort();
}

export default customModels;
`;
}

/**
 * Sauvegarde temporaire d'un bloc personnalis√© dans localStorage
 */
export function saveCustomModelToTemp(name: string, model: BlockModel): void {
  try {
    const key = `${TEMP_PREFIX}${name}`;
    localStorage.setItem(key, JSON.stringify(model));
    console.log(`üíæ Mod√®le "${name}" sauvegard√© temporairement dans localStorage`);
  } catch (error) {
    console.error('Erreur lors de la sauvegarde temporaire:', error);
    throw new Error(`Impossible de sauvegarder temporairement le bloc "${name}"`);
  }
}

/**
 * Charge tous les mod√®les temporaires depuis localStorage
 */
export function loadCustomModelsFromTemp(): Record<string, BlockModel> {
  const tempModels: Record<string, BlockModel> = {};
  
  try {
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith(TEMP_PREFIX)) {
        try {
          const name = key.replace(TEMP_PREFIX, '');
          const modelData = localStorage.getItem(key);
          if (modelData) {
            const model = JSON.parse(modelData) as BlockModel;
            tempModels[name] = model;
          }
        } catch (error) {
          console.warn('Erreur lors du chargement du mod√®le temporaire:', key, error);
        }
      }
    }
  } catch (error) {
    console.error('Erreur lors du chargement des mod√®les temporaires:', error);
  }
  
  return tempModels;
}

/**
 * Supprime un mod√®le temporaire de localStorage
 */
export function deleteCustomModelFromTemp(name: string): void {
  try {
    const key = `${TEMP_PREFIX}${name}`;
    localStorage.removeItem(key);
    console.log(`üóëÔ∏è Mod√®le temporaire "${name}" supprim√©`);
  } catch (error) {
    console.error('Erreur lors de la suppression du mod√®le temporaire:', error);
    throw new Error(`Impossible de supprimer le mod√®le temporaire "${name}"`);
  }
}

/**
 * Sauvegarde un bloc personnalis√© dans un fichier TypeScript
 * 
 * Note: Cette fonction g√©n√®re le fichier TypeScript mais ne peut pas
 * l'√©crire directement sur le syst√®me de fichiers pour des raisons de s√©curit√©.
 * L'utilisateur devra copier le contenu g√©n√©r√© dans le fichier appropri√©.
 */
export function saveCustomModelToFile(name: string, model: BlockModel): {
  fileName: string;
  fileContent: string;
  indexContent: string;
} {
  try {
    const fileName = generateUniqueFileName(name);
    const fileContent = generateBlockFileContent(model, fileName);
    
    // Pour l'instant, on retourne le contenu √† copier manuellement
    console.log(`üìù Contenu du fichier ${fileName} √† cr√©er :`);
    console.log(fileContent);
    
    return {
      fileName,
      fileContent,
      indexContent: '' // Sera g√©n√©r√© plus tard
    };
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du fichier:', error);
    throw new Error(`Impossible de g√©n√©rer le fichier pour "${name}"`);
  }
}

/**
 * Sauvegarde automatique d'un bloc personnalis√©
 * 
 * Cette fonction sauvegarde temporairement dans localStorage ET g√©n√®re
 * le contenu des fichiers pour export manuel.
 */
export function saveCustomModelAutomatically(name: string, model: BlockModel, existingModels: Record<string, BlockModel> = {}): {
  fileName: string;
  fileContent: string;
  indexContent: string;
  instructions: string[];
} {
  try {
    // 1. Sauvegarder temporairement dans localStorage
    saveCustomModelToTemp(name, model);
    
    // 2. G√©n√©rer le contenu du fichier du bloc
    const fileName = generateUniqueFileName(name);
    const fileContent = generateBlockFileContent(model, fileName);
    
    // 3. Cr√©er le nouveau dictionnaire avec le nouveau mod√®le
    const updatedModels = { ...existingModels, [name]: model };
    
    // 4. G√©n√©rer le contenu de l'index mis √† jour
    const indexContent = generateLibraryIndexContent(updatedModels);
    
    // 5. Instructions pour l'utilisateur
    const instructions = [
      `üíæ Mod√®le "${name}" sauvegard√© temporairement (persiste entre rechargements)`,
      `üìÅ Pour sauvegarde permanente, cr√©ez le fichier : src/blocks/Library/${fileName}`,
      `üìù Copiez le contenu du bloc dans ce fichier`,
      `üìã Remplacez le contenu de src/blocks/Library/index.ts`,
      `üîÑ Red√©marrez l'application pour voir les changements`
    ];
    
    console.log(`üöÄ Sauvegarde automatique du mod√®le "${name}"`);
    console.log(`üìÅ Fichier √† cr√©er : ${fileName}`);
    console.log('üìù Contenu du fichier :');
    console.log(fileContent);
    console.log('üìã Contenu de l\'index mis √† jour :');
    console.log(indexContent);
    console.log('üí° Instructions :');
    instructions.forEach(instruction => console.log(`   ${instruction}`));
    
    return {
      fileName,
      fileContent,
      indexContent,
      instructions
    };
  } catch (error) {
    console.error('Erreur lors de la sauvegarde automatique:', error);
    throw new Error(`Impossible de sauvegarder automatiquement le bloc "${name}"`);
  }
}

/**
 * Exporte un bloc personnalis√© vers un fichier TypeScript (pour partage)
 */
export async function exportCustomModelToFile(name: string, model: BlockModel): Promise<void> {
  try {
    const fileName = generateUniqueFileName(name);
    const fileContent = generateBlockFileContent(model, fileName);
    
    // Cr√©er un blob avec le contenu du fichier
    const blob = new Blob([fileContent], { type: 'text/plain' });
    
    // Cr√©er un lien de t√©l√©chargement
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    a.style.display = 'none';
    
    // D√©clencher le t√©l√©chargement
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    
    // Nettoyer l'URL
    URL.revokeObjectURL(url);
    
    console.log(`üìÅ Bloc personnalis√© "${name}" export√© vers ${fileName}`);
    console.log('üí° Pour l\'ajouter √† votre biblioth√®que :');
    console.log(`   1. Copiez le fichier ${fileName} dans src/blocks/Library/`);
    console.log('   2. Mettez √† jour src/blocks/Library/index.ts');
  } catch (error) {
    console.error('Erreur lors de l\'export du bloc personnalis√©:', error);
    throw new Error(`Impossible d'exporter le bloc "${name}"`);
  }
}

/**
 * Importe un bloc personnalis√© depuis un fichier TypeScript
 */
export async function importCustomModelFromFile(file: File): Promise<{ name: string; model: BlockModel }> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = (event) => {
      try {
        const content = event.target?.result as string;
        
        // Extraire le nom du bloc depuis le contenu
        const blockNameMatch = content.match(/const\s+(\w+):\s+BlockModel/);
        if (!blockNameMatch) {
          throw new Error('Format de fichier invalide: nom de bloc non trouv√©');
        }
        
        const blockName = blockNameMatch[1];
        
        // Extraire l'objet BlockModel (approche simple)
        const modelMatch = content.match(/const\s+\w+:\s+BlockModel\s*=\s*({[\s\S]*});/);
        if (!modelMatch) {
          throw new Error('Format de fichier invalide: mod√®le non trouv√©');
        }
        
        // √âvaluer l'objet (attention √† la s√©curit√© en production)
        const modelString = modelMatch[1];
        const model = eval(`(${modelString})`) as BlockModel;
        
        // Valider le mod√®le
        if (!model || !model.name || !model.type) {
          throw new Error('Mod√®le invalide: propri√©t√©s manquantes');
        }
        
        resolve({ name: blockName, model });
      } catch (error) {
        reject(new Error(`Erreur lors de l'import: ${error}`));
      }
    };
    
    reader.onerror = () => {
      reject(new Error('Erreur lors de la lecture du fichier'));
    };
    
    reader.readAsText(file);
  });
}

/**
 * Valide un bloc personnalis√©
 */
export function validateCustomBlock(model: any): {
  isValid: boolean;
  errors: string[];
} {
  const errors: string[] = [];
  
  // V√©rifications de base
  if (!model || typeof model !== 'object') {
    errors.push('Le mod√®le doit √™tre un objet');
    return { isValid: false, errors };
  }
  
  if (!model.type || typeof model.type !== 'string') {
    errors.push('Le type de bloc est requis');
  }
  
  if (!model.name || typeof model.name !== 'string') {
    errors.push('Le nom du bloc est requis');
  }
  
  if (!Array.isArray(model.inputs)) {
    errors.push('Les entr√©es doivent √™tre un tableau');
  }
  
  if (!Array.isArray(model.outputs)) {
    errors.push('Les sorties doivent √™tre un tableau');
  }
  
  // Validation des ports
  if (Array.isArray(model.inputs)) {
    model.inputs.forEach((port: any, index: number) => {
      if (!port || typeof port !== 'object') {
        errors.push(`Port d'entr√©e ${index}: doit √™tre un objet`);
        return;
      }
      
      if (!port.id || typeof port.id !== 'string') {
        errors.push(`Port d'entr√©e ${index}: ID requis`);
      }
      
      if (!port.name || typeof port.name !== 'string') {
        errors.push(`Port d'entr√©e ${index}: nom requis`);
      }
      
      if (!port.kind || !['item', 'fluid', 'power'].includes(port.kind)) {
        errors.push(`Port d'entr√©e ${index}: kind invalide`);
      }
      
      if (!port.unit || !['items/min', 'items/s'].includes(port.unit)) {
        errors.push(`Port d'entr√©e ${index}: unit√© invalide`);
      }
      
      if (typeof port.rate !== 'number' || port.rate < 0) {
        errors.push(`Port d'entr√©e ${index}: rate doit √™tre un nombre positif`);
      }
    });
  }
  
  if (Array.isArray(model.outputs)) {
    model.outputs.forEach((port: any, index: number) => {
      if (!port || typeof port !== 'object') {
        errors.push(`Port de sortie ${index}: doit √™tre un objet`);
        return;
      }
      
      if (!port.id || typeof port.id !== 'string') {
        errors.push(`Port de sortie ${index}: ID requis`);
      }
      
      if (!port.name || typeof port.name !== 'string') {
        errors.push(`Port de sortie ${index}: nom requis`);
      }
      
      if (!port.kind || !['item', 'fluid', 'power'].includes(port.kind)) {
        errors.push(`Port de sortie ${index}: kind invalide`);
      }
      
      if (!port.unit || !['items/min', 'items/s'].includes(port.unit)) {
        errors.push(`Port de sortie ${index}: unit√© invalide`);
      }
      
      if (typeof port.rate !== 'number' || port.rate < 0) {
        errors.push(`Port de sortie ${index}: rate doit √™tre un nombre positif`);
      }
    });
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

/**
 * Test du syst√®me de biblioth√®que
 * Cette fonction permet de v√©rifier que le syst√®me fonctionne correctement
 */
export function testLibrarySystem(): void {
  console.log('üß™ Test du syst√®me de biblioth√®que...');
  
  // Test 1: G√©n√©ration d'un fichier
  const testModel: BlockModel = {
    type: 'Assembler',
    name: 'Test Assembler',
    description: 'Mod√®le de test',
    inputs: [
      {
        id: 'test-input',
        name: 'Test Input',
        kind: 'item',
        unit: 'items/min',
        rate: 60
      }
    ],
    outputs: [
      {
        id: 'test-output',
        name: 'Test Output',
        kind: 'item',
        unit: 'items/min',
        rate: 30
      }
    ],
    overclockPct: 100,
    powerEstimateMW: 4.0,
    color: '#4a9eff',
    icon: 'üß™'
  };
  
  try {
    // G√©n√©rer le fichier de test
    const result = saveCustomModelToFile('TestModel', testModel);
    console.log('‚úÖ Test 1: G√©n√©ration de fichier r√©ussie');
    console.log('üìÅ Fichier g√©n√©r√©:', result.fileName);
    
    // Tester l'export
    console.log('‚úÖ Test 2: Syst√®me d\'export pr√™t');
    
    console.log('üéâ Tests du syst√®me de biblioth√®que termin√©s !');
    console.log('üí° Pour utiliser un bloc personnalis√© :');
    console.log('   1. Utilisez "Exporter" pour t√©l√©charger le fichier .ts');
    console.log('   2. Placez le fichier dans src/blocks/Library/');
    console.log('   3. Mettez √† jour src/blocks/Library/index.ts');
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}
